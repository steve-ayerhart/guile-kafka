(define-module (kafka connection)
  #:use-module (fibers)
  #:use-module (fibers channels)
  #:use-module (rnrs bytevectorsy)
  #:use-module (ice-9 binary-ports)
  #:use-module (ice-9 match))

(define (set-nonblocking! port)
  (fcntl port F_SETFL (logior O_NONBLOCK (fcntl port F_GETFL)))
  (setvbuf port 'block 1024))

(define (make-default-socket family addr port)
  (let ((sock (socket PF_INET SOCK_STREAM 0)))
    (setsockopt sock SOL_SOCKET SO_REUSEADDR 1)
    (fcntl sock F_SETFD FD_CLOEXEC)
    (bind sock family addr port)
    (set-nonblocking! sock)
    sock))

(define (client-loop client handler)
  (setvbuf client 'block 1024)
  (setsockopt client IPROTO_TCP TCP_NODELAY 1)
  (with-throw-handler #t
    (λ ()
      (let loop ()
        (loop)))))

(define (socket-loop socket handler)
  (let loop ()
    (match (accept socket (logior SOCK_NONBLOCK SOCK_CLOEXEC))
      ((client . sockaddr)
       (spawn-fiber (λ ()
                      (try-client-loop client handler))
                    #:parallel? #t)
       (loop)))))
