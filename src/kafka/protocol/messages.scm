(define-module (kafka protocol messages)
  #:export (current-api-version
            metadata-request-schema
            metadata-response-schema))

(define current-api-version (make-parameter 0))

(define-syntax-rule (define-schema name schemas)
  "defines a function @name that returns a schema based of the
@current-api-version parameter"
  (define (name)
    (let fetch ((version (current-api-version)))
      (let ((schema-version (assoc-ref schemas version)))
        (if schema-version
            (acons 'correlation-id 'string schema-version)
            (fetch (- version 1)))))))

(define-schema metadata-request-schema
  '((0 ((string)))
    (1 ((string)))
    (2 ((string)))
    (3 ((string)))
    (4 ((string) boolean))
    (5 ((string) boolean))
    (6 ((string) boolean))
    (7 ((string) boolean))
    (8 ((string) boolean boolean boolean))))

(define-schema metadata-response-schema
    '((0 ((brokers ((node-id . sint32)
                      (host . string)
                      (port . sint32)))
            (topics ((error-code . sint16)
                     (name . string)
                     (partitions ((error-code . sint16)
                                  (partition-index . sint32)
                                  (leader-id . sint32)
                                  (replica-nodes (sint32))
                                  (isr-nodes (sint32))))))))
      (1 ((brokers ((node-id . sint32)
                      (host . string)
                      (port . sint32)
                      (rack . nullable-string)))
            (topics ((error-code . sint16)
                     (name . string)
                     (is-internal . boolean)
                     (partitions ((error-code . sint16)
                                  (partition-index . sint32)
                                  (leader-id . sint32)
                                  (replica-nodes (sint32))
                                  (isr-nodes (sint32))))))))
      (2 ((brokers ((node-id . sint32)
                      (host . string)
                      (port . sint32)
                      (rack . nullable-string)))
            (cluster-id . nullable-string)
            (controller-id . sint32)
            (topics ((error-code . sint16)
                     (name . string)
                     (is-internal . boolean)
                     (partitions ((error-code . sint16)
                                  (partition-index . sint32)
                                  (leader-id . sint32)
                                  (replica-nodes (sint32))
                                  (,reisr-nodes (sint32))))))))
      (3 ((throttle-time-ms . int32)
            (brokers ((node-id . sint32)
                      (host . string)
                      (port . sint32)
                      (rack . nullable-string)))
            (cluster-id . nullable-string)
            (controller-id . sint32)
            (topics ((error-code . sint16)
                     (name . string)
                     (is-internal . boolean)
                     (partitions ((error-code . sint16)
                                  (partition-index . sint32)
                                  (leader-id . sint32)
                                  (replica-nodes (sint32))
                                  (isr-nodes (sint32))))))))))
